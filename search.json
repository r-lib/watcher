[{"path":"http://shikokuchuo.net/watcher/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 watcher authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://shikokuchuo.net/watcher/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Charlie Gao. Author, maintainer. Posit Software, PBC. Copyright holder.","code":""},{"path":"http://shikokuchuo.net/watcher/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gao C (2025). watcher: Watch File System Changes. R package version 0.0.1.9000, https://github.com/shikokuchuo/watcher/, https://shikokuchuo.net/watcher/.","code":"@Manual{,   title = {watcher: Watch the File System for Changes},   author = {Charlie Gao},   year = {2025},   note = {R package version 0.0.1.9000, https://github.com/shikokuchuo/watcher/},   url = {https://shikokuchuo.net/watcher/}, }"},{"path":"http://shikokuchuo.net/watcher/index.html","id":"watcher","dir":"","previous_headings":"","what":"Watch the File System for Changes","title":"Watch the File System for Changes","text":"Watch File System Changes R binding ‘libfswatch’, file system monitoring library. watching done background, operating asynchronously without blocking session. Watch files directories recursively. Log activity, trigger R function run every time event occurs.","code":""},{"path":"http://shikokuchuo.net/watcher/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Watch the File System for Changes","text":"can install development version watcher :","code":"pak::pak(\"shikokuchuo/watcher\")"},{"path":"http://shikokuchuo.net/watcher/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Watch the File System for Changes","text":"Create ‘Watcher’ using watcher::watcher(). default watch current working directory recursively write events stdout. Set callback argument run arbitrary R function, rlang-style formula, every time file changes: Uses later package execute callback R idle top level, Whenever later::run_now() called, instance automatically Shiny’s event loop.","code":"library(watcher) dir <- file.path(tempdir(), \"watcher-example\") dir.create(dir)  w <- watcher(dir, recursive = TRUE, callback = ~print(\"event triggered\")) w #> <Watcher> #>   Public: #>     initialize: function (path, recursive, callback)  #>     path: /tmp/RtmpvhoSAP/watcher-example #>     running: FALSE #>     start: function ()  #>     stop: function ()  #>   Private: #>     watch: externalptr w$start()  Sys.sleep(1) file.create(file.path(dir, \"oldfile\")) #> [1] TRUE later::run_now(2) #> [1] \"event triggered\"  file.rename(file.path(dir, \"oldfile\"), file.path(dir, \"newfile\")) #> [1] TRUE later::run_now(2) #> [1] \"event triggered\"  file.remove(file.path(dir, \"newfile\")) #> [1] TRUE later::run_now(2) #> [1] \"event triggered\"  w$stop() unlink(dir, force = TRUE)"},{"path":"http://shikokuchuo.net/watcher/reference/watcher-package.html","id":null,"dir":"Reference","previous_headings":"","what":"watcher: Watch the File System for Changes — watcher-package","title":"watcher: Watch the File System for Changes — watcher-package","text":"R binding 'libfswatch', file system monitoring library. Watch files directories recursively background. Log activity, trigger R function run every time event occurs.","code":""},{"path":[]},{"path":"http://shikokuchuo.net/watcher/reference/watcher-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"watcher: Watch the File System for Changes — watcher-package","text":"Maintainer: Charlie Gao charlie.gao@shikokuchuo.net (ORCID) contributors: Posit Software, PBC [copyright holder]","code":""},{"path":"http://shikokuchuo.net/watcher/reference/watcher.html","id":null,"dir":"Reference","previous_headings":"","what":"Watch a Filesystem Location — watcher","title":"Watch a Filesystem Location — watcher","text":"Create 'Watcher' filesystem location monitor changes background.","code":""},{"path":"http://shikokuchuo.net/watcher/reference/watcher.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Watch a Filesystem Location — watcher","text":"","code":"watcher(path = getwd(), recursive = TRUE, callback = NULL)"},{"path":"http://shikokuchuo.net/watcher/reference/watcher.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Watch a Filesystem Location — watcher","text":"path Character path file directory watch. Defaults current working directory. recursive Logical value, default TRUE, whether recursively scan path, including subdirectories. callback function formula (see rlang::as_function) - called time event triggered. default, NULL, causes event flag types paths written stdout instead.","code":""},{"path":"http://shikokuchuo.net/watcher/reference/watcher.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Watch a Filesystem Location — watcher","text":"'Watcher' R6 class object. Start stop background monitoring using $start() $stop() methods - return logical value whether succeeded.","code":""},{"path":"http://shikokuchuo.net/watcher/reference/watcher.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Watch a Filesystem Location — watcher","text":"limited subset filesystem events watched, namely: Created, Updated, Removed Renamed. Events 'bubbled' single event triggers multiple event flag types, callback called . Default latency 1s.","code":""},{"path":"http://shikokuchuo.net/watcher/reference/watcher.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Watch a Filesystem Location — watcher","text":"","code":"w <- watcher(tempdir()) isTRUE(w$start()) #> [1] TRUE w #> <Watcher> #>   Public: #>     initialize: function (path, recursive, callback)  #>     path: /tmp/Rtmpc5ZOQd #>     running: TRUE #>     start: function ()  #>     stop: function ()  #>   Private: #>     watch: externalptr isTRUE(w$stop()) #> [1] TRUE w #> <Watcher> #>   Public: #>     initialize: function (path, recursive, callback)  #>     path: /tmp/Rtmpc5ZOQd #>     running: FALSE #>     start: function ()  #>     stop: function ()  #>   Private: #>     watch: externalptr"},{"path":[]},{"path":"http://shikokuchuo.net/watcher/news/index.html","id":"watcher-001","dir":"Changelog","previous_headings":"","what":"watcher 0.0.1","title":"watcher 0.0.1","text":"Initial open source version.","code":""}]
