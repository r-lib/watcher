[{"path":"https://r-lib.github.io/watcher/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 watcher authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://r-lib.github.io/watcher/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Charlie Gao. Author, maintainer. Posit Software, PBC. Copyright holder.","code":""},{"path":"https://r-lib.github.io/watcher/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gao C (2025). watcher: Watch File System Changes. R package version 0.1.0.9000, https://github.com/r-lib/watcher/, https://r-lib.github.io/watcher/.","code":"@Manual{,   title = {watcher: Watch the File System for Changes},   author = {Charlie Gao},   year = {2025},   note = {R package version 0.1.0.9000, https://github.com/r-lib/watcher/},   url = {https://r-lib.github.io/watcher/}, }"},{"path":"https://r-lib.github.io/watcher/index.html","id":"watcher","dir":"","previous_headings":"","what":"Watch the File System for Changes","title":"Watch the File System for Changes","text":"Watch File System Changes R binding ‘libfswatch’, file system monitoring library. uses optimal event-driven API platform: ReadDirectoryChangesW Windows FSEvents MacOS inotify Linux kqueue BSD File Events Notification Solaris/Illumos Watching done asynchronously background, without blocking session. Watch files, directories recursively. Log activity, run R function every time change event occurs.","code":""},{"path":"https://r-lib.github.io/watcher/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Watch the File System for Changes","text":"Install current development version watcher using:","code":"pak::pak(\"r-lib/watcher\")"},{"path":"https://r-lib.github.io/watcher/index.html","id":"installation-from-source","dir":"","previous_headings":"Installation","what":"Installation from Source","title":"Watch the File System for Changes","text":"watcher requires ‘libfswatch’ library. Linux / MacOS, installed version used found standard filesystem locations. Windows, found, bundled version ‘libfswatch’ 1.19.0-dev compiled source. Source compilation library requires ‘cmake’.","code":""},{"path":"https://r-lib.github.io/watcher/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick Start","title":"Watch the File System for Changes","text":"Create ‘Watcher’ using watcher::watcher(). default watch current working directory recursively write events stdout. Set callback argument run R function, rlang-style formula, every time file changes: Uses ‘later’ package execute callback R idle top level, whenever later::run_now() called, instance automatically Shiny’s event loop. Function called back character vector paths files changed.","code":"library(watcher) dir <- file.path(tempdir(), \"watcher-example\") dir.create(dir)  w <- watcher(dir, callback = ~print(.x), latency = 0.5) w #> <Watcher> #>   Public: #>     initialize: function (path, callback, latency)  #>     path: /tmp/RtmpcSO6DA/watcher-example #>     running: FALSE #>     start: function ()  #>     stop: function ()  #>   Private: #>     watch: externalptr w$start()  file.create(file.path(dir, \"newfile\")) #> [1] TRUE file.create(file.path(dir, \"anotherfile\")) #> [1] TRUE later::run_now(1) #> [1] \"/tmp/RtmpcSO6DA/watcher-example/newfile\"     #> [2] \"/tmp/RtmpcSO6DA/watcher-example/anotherfile\"  newfile <- file(file.path(dir, \"newfile\"), open = \"r+\") cat(\"hello\", file = newfile) close(newfile) later::run_now(1) #> [1] \"/tmp/RtmpcSO6DA/watcher-example/newfile\"  file.remove(file.path(dir, \"newfile\")) #> [1] TRUE later::run_now(1) #> [1] \"/tmp/RtmpcSO6DA/watcher-example/newfile\"  w$stop() unlink(dir, recursive = TRUE, force = TRUE)"},{"path":"https://r-lib.github.io/watcher/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Watch the File System for Changes","text":"Thanks authors ‘libfswatch’, upon package based: Alan Dipert Enrico M. Crisostomo","code":""},{"path":"https://r-lib.github.io/watcher/reference/watcher-package.html","id":null,"dir":"Reference","previous_headings":"","what":"watcher: Watch the File System for Changes — watcher-package","title":"watcher: Watch the File System for Changes — watcher-package","text":"R binding 'libfswatch', file system monitoring library. Watch files, directories recursively, changes background. Log activity, run R function every time change event occurs.","code":""},{"path":[]},{"path":"https://r-lib.github.io/watcher/reference/watcher-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"watcher: Watch the File System for Changes — watcher-package","text":"Maintainer: Charlie Gao charlie.gao@shikokuchuo.net (ORCID) contributors: Posit Software, PBC [copyright holder]","code":""},{"path":"https://r-lib.github.io/watcher/reference/watcher.html","id":null,"dir":"Reference","previous_headings":"","what":"Watch a Filesystem Location — watcher","title":"Watch a Filesystem Location — watcher","text":"Create 'Watcher' filesystem location monitor changes background.","code":""},{"path":"https://r-lib.github.io/watcher/reference/watcher.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Watch a Filesystem Location — watcher","text":"","code":"watcher(path = getwd(), callback = NULL, latency = 1)"},{"path":"https://r-lib.github.io/watcher/reference/watcher.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Watch a Filesystem Location — watcher","text":"path Character path file, directory watch recursively. Defaults current working directory. callback function formula (see rlang::as_function), takes least one argument. called back character vector comprising paths files changed. default, NULL, causes paths changed written stdout instead. latency Numeric latency seconds events reported callbacks triggered. default 1s.","code":""},{"path":"https://r-lib.github.io/watcher/reference/watcher.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Watch a Filesystem Location — watcher","text":"'Watcher' R6 class object. Start stop background monitoring using $start() $stop() methods - return logical value whether succeeded.","code":""},{"path":"https://r-lib.github.io/watcher/reference/watcher.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Watch a Filesystem Location — watcher","text":"Uses optimal event-driven API platform: 'ReadDirectoryChangesW' Windows, 'FSEvents' MacOS, 'inotify' Linux, 'kqueue' BSD, 'File Events Notification' Solaris/Illumos. Note: latency setting mean changes polled interval, still rely optimal platform-specific monitor. implementation 'latency' also platform-dependent. Events 'bubbled' single change triggers multiple event flags cause callback called . possible set watch path currently exist, monitored created.","code":""},{"path":"https://r-lib.github.io/watcher/reference/watcher.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Watch a Filesystem Location — watcher","text":"","code":"w <- watcher(tempdir()) w$start() w #> <Watcher> #>   Public: #>     initialize: function (path, callback, latency)  #>     path: /tmp/RtmpAWSVus #>     running: TRUE #>     start: function ()  #>     stop: function ()  #>   Private: #>     watch: externalptr w$stop() w #> <Watcher> #>   Public: #>     initialize: function (path, callback, latency)  #>     path: /tmp/RtmpAWSVus #>     running: FALSE #>     start: function ()  #>     stop: function ()  #>   Private: #>     watch: externalptr  Sys.sleep(1)"},{"path":"https://r-lib.github.io/watcher/news/index.html","id":"watcher-development-version","dir":"Changelog","previous_headings":"","what":"watcher (development version)","title":"watcher (development version)","text":"Updates bundled ‘libfswatch’ source package 1.19.0-dev.","code":""},{"path":"https://r-lib.github.io/watcher/news/index.html","id":"watcher-010","dir":"Changelog","previous_headings":"","what":"watcher 0.1.0","title":"watcher 0.1.0","text":"CRAN release: 2025-02-06 Initial CRAN release.","code":""}]
